<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wdb3a.AdminMapper">
	<!-- <select id="listAll" resultType="orderList"> select orderCode, id, 
		dietCode, orderDate, price, orderItem, transportNum from orderList </select> -->
	<select id="listAll" resultType="OrderList">
		select b.dietCode, b.orderCode,
		b.id, a.dietName, b.orderDate, b.price,
		b.orderItemCode,
		b.transportNum, c.orderItemName
		from diet a join
		orderlist b join
		orderitem c
		where
		a.dietCode=b.dietCode
		and
		b.orderItemCode = c.orderItemCode
		<include refid="search"></include>
	</select>
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">
				and b.id like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchType == 'c'.toString()">
				and a.dietName like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchType == 'a'.toString()">
				and c.orderItemName like CONCAT('%',#{keyword},'%')
			</if>
		</if>
	</sql>

	<select id="read" resultType="OrderList">
		select b.dietCode, b.orderCode,
		b.id, a.dietName, b.orderDate,
		b.price,
		b.orderItemCode, b.transportNum,
		c.id, c.name, c.address,
		c.tel
		from
		diet a join orderlist b join member c
		where a.dietCode=b.dietCode
		and
		c.id=b.id
		and orderCode=#{orderCode};
	</select>

	<!--식재료 재고량 -->
	<select id="foodStockList" resultType="FoodMInven">
		select foodMName, sum(inAmount) as inAmount, sum(outAmount) as
		outAmount, unit, inAmount-outAmount as stock
		from foodminven
		group by foodMName
	</select>
	
	<select id="foodStockListSearch" resultType="FoodMInven">
		select foodMName, sum(inAmount) as inAmount, sum(outAmount) as
		outAmount, unit
		from foodminven
		group by foodMName
		<include refid="foodsearch"></include>
	</select>
	<sql id="foodsearch">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">
				having foodMName like CONCAT('%',#{keyword},'%')
			</if>
		</if>
	</sql>
	
	
	<!--식재료 추가주문 -->
	<select id="foodMaterial" resultType="foodMaterial">
		select foodMCode, foodMName, price, unit
		from foodmaterial
		<include refid="foodMaterialSerarch"></include>
	</select>
	<sql id="foodMaterialSerarch">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">
				where foodMName like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchType == 'c'.toString()">
				where foodMICode like CONCAT('%',#{keyword},'%')
			</if>
		</if>
	</sql>


	<update id="refundupdate">
		update orderlist set orderItemCode=6
		where
		orderCode=#{orderCode} and orderItemCode BETWEEN 0 and 3
	</update>

	<update id="workupdate">
		update orderlist set orderItemCode = 3
		where
		orderCode=#{orderCode}
		and orderItemCode = 10
	</update>
	<!--특정 식단에 대한 식재료 검색 -->
	<select id="foodMAmountRead" resultType="FoodMAmountRead">
		select
		sum(b.foodMAmount) totalAmount ,b.foodMCode,f.foodMName, f.price,
		f.unit,
		a.orderCode
		from (select
		d.sideDcode, o.orderCode from orderlist
		o,
		dietinfo d where
		o.ordercode=#{orderCode}
		and o.dietCode=d.dietCode)
		a,
		sidedinfo
		b,foodmaterial f
		where a.sideDCode=b.sideDCode and
		b.foodMCode=f.foodMCode
		group by f.foodMName;
	</select>
	<!-- 쿼리 미완성 -->
	<!-- <select id="foodMAmountRead" resultType="FoodMAmountRead"> select sum(b.foodMAmount) 
		foodMAmount ,b.foodMCode,f.foodMName, f.price, f.unit, a.orderCode from (select 
		d.sideDcode, o.orderCode from orderlist o, dietinfo d where o.ordercode in 
		<foreach collection="oCode" item="item" index="index" separator="," open="(" 
		close=")"> #{orderCode} </foreach> and o.dietCode=d.dietCode) a, sidedinfo 
		b,foodmaterial f where a.sideDCode=b.sideDCode and b.foodMCode=f.foodMCode 
		group by f.foodMName </select> -->
	<select id="chartList" resultType="ChartList"> <!--특정식단에 대한 이름, 판매량 -->
		select diet.dietName, sum(orderList.dietAmount) as sellAmount
		from
		orderlist, diet
		where orderlist.dietCode = diet.dietCode and
		orderlist.orderItemCode = 8
		GROUP by diet.dietName;
	</select>
	<select id="chartprice" resultType="ChartPrice"><!-- 날짜에 대한 매출,판매량 -->
		select sum(price) as totalprice, orderDate, sum(dietAmount) as
		dietAmount
		from orderlist
		where orderItemCode=8 and orderDate BETWEEN
		CURDATE()-7 and CURDATE()
		GROUP by orderDate;
	</select>
	<select id="chartprice1" resultType="ChartPrice"><!-- 날짜에 대한 매출,판매량 -->
		select sum(price) as totalprice, orderDate, sum(dietAmount) as
		dietAmount
		from orderlist
		where orderItemCode=8 and orderDate BETWEEN
		#{startdate} and #{enddate}
		GROUP by orderDate;
	</select>
	<select id="all" resultType="OrderList">
		select b.dietCode, b.orderCode,
		b.id, a.dietName, b.orderDate, b.price,
		b.orderItemCode,
		b.transportNum, c.orderItemName
		from diet a join
		orderlist b join
		orderitem c
		where a.dietCode=b.dietCode
		and
		b.orderItemCode =
		c.orderItemCode
		limit #{startRecord},
		#{recordsPerPage}
	</select>
	<!--orderList 페이지 내역 출력 -->
	<select id="orderAll" resultType="OrderList">
		select b.dietCode, b.orderCode,
		b.id, a.dietName, b.orderDate, b.price,
		b.orderItemCode,
		b.transportNum, c.orderItemName
		from diet a,
		orderlist b,
		orderitem c
		where a.dietCode=b.dietCode
		and (c.orderItemCode=2 or c.orderItemCode
		=3 or c.orderItemCode =9 or
		c.orderItemCode=10) and
		(b.orderItemCode =
		c.orderItemCode)
	</select>

	<select id="orderAllSearch" resultType="OrderList">
		select b.dietCode, b.orderCode,
		b.id, a.dietName, b.orderDate, b.price,
		b.orderItemCode,
		b.transportNum, c.orderItemName
		from diet a join
		orderlist b join
		orderitem c
		where a.dietCode=b.dietCode
		and
		b.orderItemCode = c.orderItemCode and c.orderItemCode BETWEEN 2 and 3
		<include refid="orderListSearch"></include>
	</select>
	<sql id="orderListSearch">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">
				and b.id like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchType == 'c'.toString()">
				and a.dietName like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchType == 'a'.toString()">
				and c.orderItemName like CONCAT('%',#{keyword},'%')
			</if>
		</if>
	</sql>


	<select id="orderALlCount" resultType="Integer">
		select count(b.orderCode)
		from diet a join
		orderlist b join
		orderitem c
		where
		a.dietCode=b.dietCode
		and
		b.orderItemCode = c.orderItemCode
	</select>

	<select id="AppTest" resultType="String">
		select token
		from member
		where id
		= #{id}
	</select>

	<select id="DietAll" resultType="Diet">
		select a.price, a.dietCode,
		a.dietName, a.price, a.dietImg, b.diseaseName, a.spDietItem
		from diet a
		join disease b
		where a.diseaseCode=b.diseaseCode
	</select>

	<update id="dietPriceUp">
		update diet
		set price = #{price}
		where dietCode =
		#{dietCode}
	</update>

	<update id="dietSell">
		update diet set spDietItem = 1
		where spDietItem = 2
		and dietCode = #{dietCode}
	</update>

	<update id="dietSellStop">
		update diet set spDietItem = 2
		where spDietItem = 1
		and dietCode = #{dietCode}
	</update>

	<select id="disease1" resultType="Diet">
		select a.price, a.dietCode,
		a.dietName, a.price, a.dietImg, b.diseaseName,
		a.spDietItem
		from diet a
		join disease b
		where
		a.diseaseCode=b.diseaseCode and diseaseName = '당뇨'
	</select>

	<select id="disease2" resultType="Diet">
		select a.price, a.dietCode,
		a.dietName, a.price, a.dietImg, b.diseaseName,
		a.spDietItem
		from diet a
		join disease b
		where
		a.diseaseCode=b.diseaseCode and diseaseName =
		'고지혈증'
	</select>

	<select id="disease3" resultType="Diet">
		select a.price, a.dietCode,
		a.dietName, a.price, a.dietImg, b.diseaseName,
		a.spDietItem
		from diet a
		join disease b
		where
		a.diseaseCode=b.diseaseCode and diseaseName =
		'심부전증'
	</select>

	<select id="disease4" resultType="Diet">
		select a.price, a.dietCode,
		a.dietName, a.price, a.dietImg, b.diseaseName,
		a.spDietItem
		from diet a
		join disease b
		where
		a.diseaseCode=b.diseaseCode and diseaseName =
		'신부전증'
	</select>

	<insert id="empjoin">
		INSERT INTO member (id, passwd, name, address, tel,
		email, deptCode,
		gradeCode, joinDate, path_e, education, salary,
		bank_name, bank_user,
		Account_Number, PhotoImg) VALUES (#{id},
		#{passwd}, #{name},
		#{address}, #{tel}, #{email}, #{deptCode},
		#{gradeCode}, now(),
		#{path_e}, #{education},#{salary}, #{bank_name},
		#{bank_user},
		#{Account_Number}, #{photoImg})
	</insert>

	<select id="memberAll" resultType="Member">
		select id, passwd, name,
		address, tel, email, deptCode, gradeCode, joinDate,
		outDate, photoImg,
		path_e, education, salary, bank_name, bank_user,
		Account_Number from
		member
	</select>

	<select id="memberSearch" resultType="Member">
		select id, name, gradeCode, outDate
		from member
		<include refid="memberUserSearch"></include>
	</select>
	<sql id="memberUserSearch">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">
				where id like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchType == 'c'.toString()">
				where name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchType == 'a'.toString()">
				where gradeCode like CONCAT('%',#{keyword},'%')
			</if>
		</if>
	</sql>

	<select id="memberUserInfo" resultType="Member">
		select id, passwd, name,
		address, tel, email, deptCode, gradeCode, joinDate,
		outDate, photoImg,
		path_e, education, salary, bank_name, bank_user,
		Account_Number from
		member where id=#{id}
	</select>

	<update id="joinOut">
		update member set outDate=now()
		where id=#{id}
	</update>

	<update id="empUpdate">
		update member set education=#{education},
		salary=#{salary}, bank_name=#{bank_name}, bank_user=#{bank_user},
		address=#{address}, tel=#{tel}, email=#{email}, deptCode=#{deptCode},
		gradeCode=#{gradeCode}
		where id=#{id}
	</update>

	<insert id="insertFoodM">
		insert into foodminven(foodMCode, foodMName,
		inAmount, unit, price,
		foodMStatus, orderCode, orderDate) values (#{foodMCode},
		#{foodMName},
		#{inAmount}, #{unit}, #{price}, 0, #{orderCode}, now())

	</insert>

	<update id="foodMUpdate">
		update orderlist set orderItemCode = 9
		where
		orderCode=#{orderCode}
		and
		orderItemCode = 2
	</update>
	
	<insert id="insertFoodMAdd">
		insert into foodminven(foodMCode, foodMName,
		inAmount, unit, price,
		foodMStatus, orderDate) values (#{foodMCode},
		#{foodMName},
		#{inAmount}, #{unit}, #{price}, 0, now()) 

	</insert>
	
	<!-- orderoptions에 있는 orderItemCode = 3으로 업데이트 -->
   <update id="workupdateOptions">
      update orderoptions set orderItemCode = 3
      where orderCode = #{orderCode};
   </update>
   
</mapper> 